#DEBUG ， INFO ，WARN ，ERROR四种
#设置级别为INFO，则优先级大于等于INFO级别（如：INFO、WARN、ERROR）的日志信息将可以被输出,小于该级别的如：DEBUG将不会被输出
#stdout,R就是指定日志信息（等级日志）输出目的地，比如（打印到控制台，输出到文件等）。同一条日志信息可以配置多个输出目的地。
log4j.rootLogger=info, stdout, R, levelfile

log4j.stdout=DEBUG
#tomcat控制台输出日志
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# Pattern to output the caller's file name and line number.
#%5p [%t] (%F:%L) - %m%n
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p]-[%t]-[%r] %l %m%n

log4j.R=INFO
#配置log输出目的地
#org.apache.log4j.ConsoleAppender（控制台）
#org.apache.log4j.FileAppender（文件）
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.R=org.apache.log4j.RollingFileAppender
#日志文件的名称
#可以使用环境定义其路径(System.setProperty("com.water.logsdir", "/data/project/logs"))：${com.water.logsdir}/project.log
#1 ，-Dwebapp.log.basicdir=/data/gsmpro/logs/
#2，监听器：System.setProperty(key,value);动态配置log4j生成的日志文件时，监听器的优化级为最高，且初始logger的时候，必须在设置环境变量之后。
log4j.appender.R.File=${webapp.log.basicdir}/water.log
#日志文件大小
log4j.appender.R.MaxFileSize=10240KB
#备份日志数量
log4j.appender.R.MaxBackupIndex=10

#log信息的格式
#org.apache.log4j.HTMLLayout（HTML表格形）
#org.apache.log4j.SimpleLayout（简单格式的日志，只包括日志信息的级别和指定的信息字符串 ，如:DEBUG - Hello）
#org.apache.log4j.TTCCLayout（日志的格式包括日志产生的时间、线程、类别等等信息）
#org.apache.log4j.PatternLayout（灵活地自定义日志格式）
log4j.appender.R.layout=org.apache.log4j.PatternLayout
#当使用org.apache.log4j.PatternLayout来自定义信息格式时，可以使用log4j.appender.A1.layout.ConversionPattern=  来格式化信息
#%c 输出所属类的全名，可写为 %c{Num} ,Num类名输出的范围 如："com.sun.aaa.classB", %C{2}将使日志输出输出范围为：aaa.classB
#%d 输出日志时间其格式为 可指定格式 如 %d{yyyy-MM-dd HH:mm:ss}等
#%l 输出日志事件发生位置，包括类目名、发生线程，在代码中的行数
#%n 换行符
#%m 输出代码指定信息，如info(“message”),输出message
#%p 输出日志的优先级，即 FATAL ,ERROR 等
#%r 输出从启动到显示该条日志信息所耗费的时间（毫秒数）
#%t 输出产生该日志事件的线程名
#%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
#log4j.logger.com.study.HelloLog4j=INFO
log4j.appender.R.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p]-[%t]-[%r] %l %m%n


#定义分级日志输出
#error,归类错误的日志不生效
log4j.appender.levelfile=org.apache.log4j.RollingFileAppender
log4j.appender.levelfile.File=${webapp.log.basicdir}/error.log
log4j.appender.levelfile.MaxFileSize=10240KB
log4j.appender.levelfile.MaxBackupIndex=10
log4j.appender.levelfile.layout=org.apache.log4j.PatternLayout
log4j.appender.levelfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p]-[%t]-[%r] %l %m%n
#配置Filter
#定义id为F1的拦截器,只接受INFO到ERROR
log4j.appender.levelfile.filter.F1=org.apache.log4j.varia.LevelRangeFilter
log4j.appender.levelfile.filter.F1.LevelMin=ERROR
log4j.appender.levelfile.filter.F1.LevelMax=ERROR
#定义id为F2的拦截器,不接受WARN
#log4j.appender.levelfile.filter.F2=org.apache.log4j.varia.LevelMatchFilter
#log4j.appender.levelfile.filter.F2.levelToMatch=WARN
#log4j.appender.levelfile.filter.F2.acceptOnMatch=false
#可以继续定义你需要的拦截器F3/F4.....


log4j.logger.com.water=INFO,water
log4j.appender.water=org.apache.log4j.RollingFileAppender
log4j.appender.water.File=${webapp.log.basicdir}/com_water.log
log4j.appender.water.MaxFileSize=10240KB
log4j.appender.water.MaxBackupIndex=10
log4j.appender.water.layout=org.apache.log4j.PatternLayout
log4j.appender.water.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p]-[%t]-[%r] %l %m%n

