<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
     http://www.springframework.org/schema/jee
     http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
     http://www.springframework.org/schema/security
     http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<security:debug />

	<security:global-method-security pre-post-annotations="enabled" />

	<bean id="myFilterSecurityInterceptor" class="com.water.springsecurity.MyFilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="myAccessDecisionManager" />
		<property name="securityMetadataSource" ref="myInvocationSecurityMetadataSourceService" />
	</bean>

	<!-- 用户详细信息管理：数据源、用户缓存（通过数据库管理用户、角色、权限、资源）。 -->
	<bean id="userDetailsManager" class="com.water.springsecurity.MyUserDetailsService">
		<!-- 启用用户的缓存功能 -->
		<property name="userCache" ref="userCache" />
	</bean>

	<!-- 定义上下文返回的消息的国际化。 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:org/springframework/security/messages_zh_CN" />
	</bean>

	<!-- 事件监听:实现了 ApplicationListener监听接口, 包括AuthenticationCredentialsNotFoundEvent 事件， AuthorizationFailureEvent事件，AuthorizedEvent事件， PublicInvocationEvent事 件。 -->
	<bean class="org.springframework.security.authentication.event.LoggerListener" />

	<!-- 用户的密码加密或解密 -->
	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />

	<!-- 启用用户的缓存功能 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />

	<bean id="userEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<property name="cacheName" value="userCache" />
		<property name="cacheManager" ref="cacheManager" />
	</bean>

	<bean id="userCache" class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">
		<property name="cache" ref="userEhCache" />
	</bean>

	<!-- 不要过滤图片等静态资源，其中**代表可以跨越目录，*不可以跨越目录。 -->
	<security:http pattern="/**/*.jpg" security="none" />
	<security:http pattern="/**/*.png" security="none" />
	<security:http pattern="/**/*.gif" security="none" />
	<security:http pattern="/**/*.css" security="none" />
	<security:http pattern="/**/*.js" security="none" />
	<!-- 登录页面和忘记密码页面不过滤 -->
	<security:http pattern="/admin/login.jsp" security="none" />

	<security:http access-denied-page="/error/403.jsp">
		<security:intercept-url pattern="/**" access="ROLE_ADMIN" />
		<security:form-login login-page="/admin/login.jsp" authentication-failure-url="/admin/login.jsp?error=true" default-target-url="/admin/singleindex.jsp"/>
		<!-- "记住我"功能，采用持久化策略（将用户的登录信息存放在数据库表中） -->
		<security:remember-me />
		<security:logout logout-url="/account/logout" />
		<!-- 检测失效的sessionId,超时时定位到另外一个URL -->
		<security:session-management invalid-session-url="/sessionTimeout.jsp" />
		<!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前， 实现用户、角色、权限、资源的数据库管理。 -->
		<security:custom-filter ref="myFilterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" />
	</security:http>

	<!-- 注意能够为authentication-manager 设置alias别名 -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider user-service-ref="userDetailsManager">
			<security:password-encoder ref="passwordEncoder">
				<security:salt-source user-property="username" />
			</security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>

</beans>